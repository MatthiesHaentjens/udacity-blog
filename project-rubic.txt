STRUCTURE

CSS Separate From HTML

1. Portfolio completely separates structure from design/style. - CHECK
2. There are no attributes present in the body of the document. - CHECK
3. There are no elements in the document. - CHECK

CSS Imports

There should be at least 3 imported files in the main CSS file, but the student is welcome to break it down even further if that makes it easier for them. - CHECK

Directories & Files

Files are organized with a directory structure that separates files based on page and functionality. - CHECK

Links

There is an intentional user flow on each page with appropriate links as needed. - CHECK

DESIGN

Custom Design

Custom images, layout, and styling.

Foundations/Building Blocks

1. Typography: Custom design for typography with at least 3 unique properties for each typography selector
	Headers (h1 to h3 at minimum) <h1> - CHECK
	Paragraph Text <p>
		a. Bold - CHECK
		b. Italic - CHECK
		c. Underlined - CHECK
	Links <a> - CHECK
	Quotes
2. Colors: At least 3 colors are used. - CHECK

Components

The following are used in the webpage:

	Image(s) - CHECK
	Image caption - CHECK
	Buttons - CHECK
	Card - CHECK

Patterns

The general pattern of the webpage should be as follows:

	Blog Homepage - CHECK
	Navbar - CHECK
	Footer - CHECK
	Blog Post Card - CHECK
		Card - CHECK
		Image - CHECK
		Buttons - CHECK
	Blog Post - CHECK
		Header - CHECK
		Author Info - CHECK
			Name - CHECK
			Title
			Current Company/School
			Short Bio - CHECK
			Avatar - CHECK
		Social Sharing
			Twitter
			Facebook - CHECK
			LinkedIn - CHECK

Pages

The following pages should be present:

	Blog Homepage - CHECK
	Blog Post - CHECK

LAYOUT

Flexbox Based Layout

Uses Flexbox at least twice throughout the project to create a component or pattern - CHECK

Grid Based Layout

Uses CSS Grid at least twice throughout the project to create the layout for pages - CHECK

RESPONSIVENESS

Multi-Device Web Design

Pages are mobile-friendly and display correctly on all display sizes (mobile, tablet, desktop). - CHECK

QUALITY

Valid HTML

	HTML5 semantic tags such as <header>, <footer>, <article>, <section> , etc. are used to add meaning to the code. - CHECK
	No div or section selectors are without a CSS class or id. - CHECK

HTML Formatting Rules

	All code is lowercase - CHECK
	The code does not have trailing white spaces. - CHECK
	Indentation is consistent (either all tabs or all 2 spaces or all 4 spaces etc). - CHECK
	Code uses a new line for every block, list or table element and indent every such child element (it is acceptable to put all elements in one line). - CHECK
	When quoting attribute values, code uses consistent quotation marks (single vs. double). - CHECK


HTML Style Rules

	HTML documents HTML5 <!doctype html> - CHECK
	Code omits type attributes for style sheets and scripts. - CHECK
	[Optional] Code does not use entity references unless necessary e.g. characters with special meaning (like < and &) as well as control or “invisible” characters (like no-break spaces). - CHECK

CSS Formatting Rules

	The code does not have trailing white spaces. - CHECK
	Indentation is consistent (either all tabs or all 2 spaces or all 4 spaces etc). - CHECK
	Code indents all content, that is rules within rules as well as declarations to reflect hierarchy and improve understanding. - CHECK
	The code uses a semicolon after every declaration for consistency and extensibility reasons. - CHECH
	Code always uses a space after a property name's colon, but no space between property and colon, for consistency reasons. - CHECK
	Code always uses a single space between the last selector and the opening brace that begins the declaration block. Code always start a new line for each selector and declaration. - CHECK
	Code always put a blank line (two line breaks) between rules. - CHECK
	Code uses consistent quotation marks for attribute selectors or property values (single vs. double). - CHECK

CSS Style Rules

	The code uses meaningful or generic ID and class names that are as short as possible, but as long as necessary. - CHECK
	The code does not use element names in conjunction with IDs or classes. - CHECK
	The code uses shorthand properties where possible. - CHECK
	[Optional] Code omits unit specification after 0 values.
	[Optional] Code includes leading 0s in decimal values for readability.
	[Optional] Code uses 3-character hexadecimal notation where possible.
	[Optional] Code separates words in ID and class names by a hyphen.
